'use strict';(function(){const b={cache:!0};b.doc={id:'id',field:['title','content'],store:['title','href','section']};const a=FlexSearch.create('balance',b);window.bookSearchIndex=a,a.add({id:0,href:'/docs/cfssl/',title:"CFSSL",section:"Docs",content:"CFSSL #  The CFSSL README is really good. Here\u0026rsquo;s some additional notes.\nChange the expiry of the CA #  Set the ca.expiry in the CSR. In the example below, we set the CA certificate to expiry in 10 years (default is 5 years).\n{ \u0026#34;hosts\u0026#34;: [ \u0026#34;my-ca.example.com\u0026#34; ], \u0026#34;key\u0026#34;: { \u0026#34;algo\u0026#34;: \u0026#34;rsa\u0026#34;, \u0026#34;size\u0026#34;: 2048 }, \u0026#34;names\u0026#34;: [ { \u0026#34;C\u0026#34;: \u0026#34;US\u0026#34;, \u0026#34;L\u0026#34;: \u0026#34;San Francisco\u0026#34;, \u0026#34;O\u0026#34;: \u0026#34;Internet Widgets, Inc.\u0026#34;, \u0026#34;OU\u0026#34;: \u0026#34;WWW\u0026#34;, \u0026#34;ST\u0026#34;: \u0026#34;California\u0026#34; } ], \u0026#34;ca\u0026#34;: { \u0026#34;expiry\u0026#34;: \u0026#34;87600h\u0026#34; } } Then, use that CSR when generating the self-signed root CA certificate and private key.\ncfssl genkey -initca csr.json | cfssljson -bare ca Change the default expiry of signed certificates #  Create a JSON file that looks like the following. Provide it as the config flag to cfssl gencert.\nIn the example below, we set the expiry of the generated certificate to 5 years (default is 1 year).\n{ \u0026#34;signing\u0026#34;: { \u0026#34;default\u0026#34;: { \u0026#34;usages\u0026#34;: [\u0026#34;signing\u0026#34;, \u0026#34;key encipherment\u0026#34;, \u0026#34;server auth\u0026#34;, \u0026#34;client auth\u0026#34;], \u0026#34;expiry\u0026#34;: \u0026#34;43800h\u0026#34; } } } cfssl gencert -ca ca.pem -ca-key ca-key.pem -config config.json csr.json You can also define signing profiles in the config file and select them with the profile flag. See the Configuration section in doc/cmd/cfssl.txt for more information.\nPrint information about a PEM-encoded certificate #  This will print information about the certificate in CFSSL\u0026rsquo;s standard JSON format.\ncfssl certinfo -cert ca.pem "}),a.add({id:1,href:'/docs/macos/',title:"macOS",section:"Docs",content:"macOS #  Homebrew #  Remove leaf applications and dependencies #  Create a text file containing regex patters for all the leaves. We\u0026rsquo;ll use this file later as input to grep.\nbrew leaves | xargs -I {} echo \u0026#34;^{}$\u0026#34; \u0026gt; leaves.txt Edit leaves.txt, removing any that you want to uninstall.\nGet the list of applications to remove, then remove them. Repeat this process until brew leaves | grep ... output is empty.\n$ brew leaves | grep -v --file leaves.txt gcc $ brew remove gcc Uninstalling /usr/local/Cellar/gcc/10.2.0_4... (1,465 files, 339.5MB) $ brew leaves | grep -v --file leaves.txt isl libmpc $ brew remove isl libmpc Uninstalling /usr/local/Cellar/isl/0.23... (72 files, 5MB) Uninstalling /usr/local/Cellar/libmpc/1.2.1... (13 files, 423.6KB) Alternatively, you can perform the list and remove in one step:\n$ brew leaves | grep -v --file leaves.txt | xargs brew remove Uninstalling /usr/local/Cellar/mpfr/4.1.0... (29 files, 5.1MB) "})})()