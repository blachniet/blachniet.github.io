<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>csharp on Brian Lachniet</title>
    <link>https://blachniet.com/tags/csharp/</link>
    <description>Recent content in csharp on Brian Lachniet</description>
    <image>
      <url>https://blachniet.com/papermod-cover.png</url>
      <link>https://blachniet.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 May 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://blachniet.com/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flush Async Output Events</title>
      <link>https://blachniet.com/posts/flush-async-output-events/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blachniet.com/posts/flush-async-output-events/</guid>
      <description>The System.Diagnostics.Process class provides the options to retrieve all output from an external process after it has completed, or to retrieve events containing the output as the execution occurs. The option to receive asynchronous output events is useful in scenarios where you need to provide user feedback or log the output when timeouts occur.
When receiving asynchronous output events, you must ensure that the external process has completed when you want to make sure that you get all the output.</description>
    </item>
    
    <item>
      <title>Structured Logging with Serilog and ELK</title>
      <link>https://blachniet.com/posts/structured-logging-serilog-elk/</link>
      <pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blachniet.com/posts/structured-logging-serilog-elk/</guid>
      <description>ThoughtWorks recently released their Technology Radar report for January 2015 and structured logging was among the techniques that they strongly suggested that the industry adopt. I&amp;rsquo;ve actually had some exposure to structured logging over the past year and have been very happy with the results. So, I thought I would share my experience.
My first exposure to structured logging was in early 2014. I was creating a simple Python application to monitor the amount traffic through my modem throughout the day and I was logging events from my application to logentries.</description>
    </item>
    
    <item>
      <title>Force Bundling Optimizations</title>
      <link>https://blachniet.com/posts/force-bundling-optimizations/</link>
      <pubDate>Mon, 16 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blachniet.com/posts/force-bundling-optimizations/</guid>
      <description>Use the following code in the BundleConfig.cs of your ASP.NET MVC application to force bundling and minification.
// BundleConfig::RegisterBundles BundleTable.EnableOptimizations = true; Why? Why would you do this? Sometimes bundling and minification causes problems, such as in AngularJS. You will want to find these problems before publishing, so just enable this line every once in a while to make sure everything still works as expected with the optimizations.</description>
    </item>
    
    <item>
      <title>Read Open File in C#</title>
      <link>https://blachniet.com/posts/read-open-files-c/</link>
      <pubDate>Mon, 16 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blachniet.com/posts/read-open-files-c/</guid>
      <description>This post is a summary of this StackOverflow answer by Cheeso.
To read a file that is currently open (or may be open later) in another process, you must specify a FileShare option. The FileShare flag indicates the modes that other processes are allowed to open the file in.
using (Stream s = System.IO.File.Open(fullFilePath, FileMode.Open, FileAccess.Read, // I want to open this file for reading only.  FileShare.ReadWrite)) // Other processes may specify  // FileAccess of read or write.</description>
    </item>
    
    <item>
      <title>Email Addresses as User Names in ASP.NET Identity</title>
      <link>https://blachniet.com/posts/email-addresses-as-user-names-in-asp-net-identity/</link>
      <pubDate>Sun, 10 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blachniet.com/posts/email-addresses-as-user-names-in-asp-net-identity/</guid>
      <description>It&amp;rsquo;s common for web applications to use email addresses instead of user names to distinguish users. However, if you are using ASP.NET Identity, you have probably noticed that it has UserName built into the IUser interface. Since Identity assumes that this is the distinguishing field for the user, it&amp;rsquo;s not crazy to think that it might be a good place to drop the email address. In order to have Identity allow an email address in this field, you will need to write a custom IIdentityValidator.</description>
    </item>
    
    <item>
      <title>Email Address in MVC 5 Google Authentication</title>
      <link>https://blachniet.com/posts/email-address-in-mvc-5-google-authentication/</link>
      <pubDate>Sat, 09 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blachniet.com/posts/email-address-in-mvc-5-google-authentication/</guid>
      <description>I&amp;rsquo;m not proud to admit that I spent hours trying to figure out this very simple problem. The goal was simple: when a user logs into my web application using Google authentication, I want to be able to grab their email address so I can store it as part of their user profile. As expected, this is very simple.
I&amp;rsquo;m assuming you&amp;rsquo;ve already enabled Google authentication by uncommenting app.UseGoogleAuthentication() in your Startup.</description>
    </item>
    
    <item>
      <title>Referencing EF Resources in a Specific Assembly</title>
      <link>https://blachniet.com/posts/referencing-ef-resources-in-a-specific-assembly/</link>
      <pubDate>Sat, 13 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blachniet.com/posts/referencing-ef-resources-in-a-specific-assembly/</guid>
      <description>This post and sample application demonstrate a possible issue with the way that Entity Framework loads the embedded metadata resources (csdl, msl, ssdl) for the entity model.
In my application, all assemblies in some specific directory are discovered and loaded at runtime. Think of it as a sort of plugin model. The application allows for multiple versions of the same assembly to be loaded, and each dll follows the [AssemblyName].[Version].dll naming scheme.</description>
    </item>
    
    <item>
      <title>Pass a Connection String to a Generated DbContext</title>
      <link>https://blachniet.com/posts/pass-a-connection-string-to-a-generated-dbcontext/</link>
      <pubDate>Sun, 03 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blachniet.com/posts/pass-a-connection-string-to-a-generated-dbcontext/</guid>
      <description>The default DbContext generated with your Entity Data Model has one constructor that takes no arguments. If you need to build the connection string programatically and pass it to the DbContext, you will have to add your own constructor. However, if you do this in the generated file, {ModelName}.Context.cs, you will lose your changes the next time the {ModelName}.Context.tt script is run.
The solution is to edit the script, {ModelName}.Context.tt. Just add the following code after the code to generate the default constructor (around line 71).</description>
    </item>
    
    <item>
      <title>How Not To Restart A ClickOnce Application</title>
      <link>https://blachniet.com/posts/how-not-to-restart-a-clickonce-application/</link>
      <pubDate>Sat, 20 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blachniet.com/posts/how-not-to-restart-a-clickonce-application/</guid>
      <description>Normally if you need to restart a WPF application programatically, you would use the following code:
private void Restart() { System.Diagnostics.Process.Start( Application.ResourceAssembly.Location); Application.Current.Shutdown(); } If you have a ClickOnce WPF application, you do not want to do this. In order to understand why, you need to understand how a ClickOnce application is normally launched.
The shortcut you click on in the Start menu is not a normal shortcut to an executable.</description>
    </item>
    
    <item>
      <title>Borderless WPF Window</title>
      <link>https://blachniet.com/posts/borderless-wpf-window/</link>
      <pubDate>Sat, 30 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blachniet.com/posts/borderless-wpf-window/</guid>
      <description>I&amp;rsquo;ve put together a very simple borderless WPF window that complements Microsoft&amp;rsquo;s Metro style quite well. I won&amp;rsquo;t go into a lot of detail here, since the code does most of the talking, but I will go over the important parts here. If you want to skip right to the source code, you can find it over at GitHub: http://bit.ly/N7afKQ
Starting with a fresh window set and the window properties WindowStyle=&amp;quot;None&amp;quot;, AllowsTransparency=&amp;quot;True&amp;quot;, and ResizeMode=&amp;quot;CanResizeWithGrip&amp;quot;.</description>
    </item>
    
    <item>
      <title>Partial Views with Unobtrusive AJAX</title>
      <link>https://blachniet.com/posts/partial-views-with-unobtrusive-ajax/</link>
      <pubDate>Wed, 10 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blachniet.com/posts/partial-views-with-unobtrusive-ajax/</guid>
      <description>In my recent exploration of web development in ASP.NET, I found what I assume to be a fairly common need to have part of a view/page update without the entire page updating. In my particular case, I wanted to have a page that listed items but also provided a form that allowed you to add an item. When an item was added, the list of items would be updated without having to regenerate the entire page.</description>
    </item>
    
  </channel>
</rss>
